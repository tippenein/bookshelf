-- | This file was auto generated by typed-wire. Do not modify by hand
module Book exposing (..)



import List as L
import Json.Decode as JD
import Json.Decode exposing ((:=))
import Json.Encode as JE

type alias Book  =
   { author : String
   , title : String
   , format : String
   , location : String
   }

jencBook : Book  -> JE.Value
jencBook = JE.object << jencTuplesBook
jencTuplesBook : Book  -> List (String, JE.Value)
jencTuplesBook  x =
    [ ("author", JE.string x.author)
    , ("title", JE.string x.title)
    , ("format", JE.string x.format)
    , ("location", JE.string x.location)
    ]
jdecBook : JD.Decoder (Book )
jdecBook =
    ("author" := JD.string) `JD.andThen` \j_author -> 
    ("title" := JD.string) `JD.andThen` \j_title -> 
    ("format" := JD.string) `JD.andThen` \j_format -> 
    ("location" := JD.string) `JD.andThen` \j_location -> 
    JD.succeed (Book j_author j_title j_format j_location)

